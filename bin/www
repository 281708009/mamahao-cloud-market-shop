#!/usr/bin/env node

/**
 * 依赖的模块
 */

var app = require('../server');
var debug = require('debug')('mamahao-mobile-site:server');
var http = require('http');

/**
 * 从环境变量获取端口
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * 创建服务器
 */

var server = http.createServer(app);

/**
 * 监听端口
 */
server.listen(port);

/**
 * 注册事件
 */
server.on('error', onError);
server.on('listening', onListening);
//捕获全局未捕获的error(优先级2),这时候捕获只能使进程不挂掉，无法做更多了！
process.on('uncaughtException',onUncaughtException);
/**
 * 处理端口
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * 错误事件回调函数
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * 服务监听事件回调函数
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('\n✔  Server Listening on ' + bind + '...');
}

/**
 * 全局未捕获异常处理
 */
function onUncaughtException(err) {
  console.error("====================异常捕获B-开始====================");
  console.error(err);
  if (typeof err === 'object') {
    if (err.stack) {
      console.error(err.stack);
    }
  }
  console.error("====================异常捕获B-结束====================");
}
